import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:flutter/foundation.dart' hide Category; // Hide Flutter's Category to avoid conflict
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:sqlite3/sqlite3.dart';
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';

// Import enums used by database tables
import '../enums/status_type.dart';
import '../enums/placement_type.dart';
import '../enums/location_type.dart';
import '../enums/branch_type.dart';
import '../enums/user_role.dart';
import '../enums/audit_action.dart';

import 'tables/users_table.dart';
// Core business tables
import 'tables/business_table.dart';
import 'tables/branches_table.dart';
import 'tables/user_roles_table.dart';
import 'tables/business_users_table.dart';
// Sync infrastructure tables
import 'tables/action_queue_table.dart';
import 'tables/sync_status_table.dart';
// Inventory tables
import 'tables/suppliers.dart';
import 'tables/inventory_line.dart';
import 'tables/category.dart' as cat;
import 'tables/sub_category.dart';
import 'tables/inventory_colors.dart';
import 'tables/inventory_sizes.dart';
import 'tables/season.dart';
import 'tables/inventory_locations.dart';
import 'tables/inventory_variants.dart';

// This will be generated by build_runner
// Run: dart run build_runner build
part 'database.g.dart';

@DriftDatabase(tables: <Type>[
  Users,
  // Core business tables
  BusinessTable,
  BranchesTable,
  UserRolesTable,
  BusinessUsersTable,
  // Sync infrastructure tables
  ActionQueueTable,
  SyncStatusTable,
  // Inventory tables
  Suppliers,
  InventoryLine,
  cat.CategoryTable,
  SubCategory,
  InventoryColors,
  InventorySizes,
  Season,
  InventoryLocations,
  InventoryVariants,
])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 4;
  
  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) async {
      await m.createAll();
    },
    onUpgrade: (Migrator m, int from, int to) async {
      // Migration from version 1 to 2 - Add inventory tables
      if (from < 2) {
        await m.create(suppliers);
        await m.create(inventoryLine);
        await m.create(categoryTable);
        await m.create(subCategory);
        await m.create(inventoryColors);
        await m.create(inventorySizes);
        await m.create(season);
        await m.create(inventoryLocations);
        await m.create(inventoryVariants);
      }
    },
  );
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final Directory dbFolder = await getApplicationDocumentsDirectory();
    final File file = File(p.join(dbFolder.path, 'app_database.db'));
    
    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }

    return NativeDatabase.createInBackground(
      file,
      setup: (Database database) {
        database.execute('PRAGMA foreign_keys = ON');
        
        if (kDebugMode) {
          debugPrint('Database initialized at: ${file.path}');
        }
      },
    );
  });
}