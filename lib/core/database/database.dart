import 'dart:io';

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:sqlite3/sqlite3.dart';
import 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';

// This will be generated by build_runner
// Run: dart run build_runner build
part 'database.g.dart';

@DriftDatabase(tables: <Type>[])
class AppDatabase extends _$AppDatabase {
  AppDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1;
  
  // Add migration strategy here when needed
  // @override
  // MigrationStrategy get migration => MigrationStrategy(
  //   onCreate: (Migrator m) async {
  //     await m.createAll();
  //   },
  //   onUpgrade: (Migrator m, int from, int to) async {
  //     // Handle migrations
  //   },
  // );
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final Directory dbFolder = await getApplicationDocumentsDirectory();
    final File file = File(p.join(dbFolder.path, 'app_database.db'));
    
    if (Platform.isAndroid) {
      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();
    }

    return NativeDatabase.createInBackground(
      file,
      setup: (Database database) {
        database.execute('PRAGMA foreign_keys = ON');
        
        if (kDebugMode) {
          debugPrint('Database initialized at: ${file.path}');
        }
      },
    );
  });
}