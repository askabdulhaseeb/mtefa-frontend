import 'dart:convert';

import '../../../core/enums/status_type.dart';
import '../../../domain/entities/inventory/supplier_entity.dart';

class SupplierModel extends SupplierEntity {
  const SupplierModel({
    required super.supplierId,
    required super.businessId,
    required super.supplierCode,
    required super.supplierName,
    required super.currency, required super.preferredSupplier, required super.status, required super.createdAt, required super.updatedAt, super.supplierType,
    super.contactPerson,
    super.phone,
    super.email,
    super.website,
    super.address,
    super.city,
    super.state,
    super.country,
    super.postalCode,
    super.taxNumber,
    super.paymentTerms,
    super.creditLimit,
    super.leadTimeDays,
    super.minimumOrderAmount,
    super.shippingMethods,
    super.qualityRating,
    super.deliveryRating,
    super.priceRating,
    super.contractStartDate,
    super.contractEndDate,
    super.notes,
    super.createdBy,
    super.updatedBy,
    super.syncStatus,
  });

  factory SupplierModel.fromJson(Map<String, dynamic> json) {
    return SupplierModel(
      supplierId: json['supplier_id'] as String,
      businessId: json['business_id'] as String,
      supplierCode: json['supplier_code'] as String,
      supplierName: json['supplier_name'] as String,
      supplierType: json['supplier_type'] as String?,
      contactPerson: json['contact_person'] as String?,
      phone: json['phone'] as String?,
      email: json['email'] as String?,
      website: json['website'] as String?,
      address: json['address'] as String?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      country: json['country'] as String?,
      postalCode: json['postal_code'] as String?,
      taxNumber: json['tax_number'] as String?,
      paymentTerms: json['payment_terms'] as String?,
      creditLimit: (json['credit_limit'] as num?)?.toDouble(),
      currency: json['currency'] as String? ?? 'PKR',
      leadTimeDays: json['lead_time_days'] as int?,
      minimumOrderAmount: (json['minimum_order_amount'] as num?)?.toDouble(),
      shippingMethods: json['shipping_methods'] != null
          ? List<String>.from(
              jsonDecode(json['shipping_methods'] as String) as List<dynamic>)
          : null,
      qualityRating: (json['quality_rating'] as num?)?.toDouble(),
      deliveryRating: (json['delivery_rating'] as num?)?.toDouble(),
      priceRating: (json['price_rating'] as num?)?.toDouble(),
      preferredSupplier: json['preferred_supplier'] as bool? ?? false,
      contractStartDate: json['contract_start_date'] != null
          ? DateTime.parse(json['contract_start_date'] as String)
          : null,
      contractEndDate: json['contract_end_date'] != null
          ? DateTime.parse(json['contract_end_date'] as String)
          : null,
      notes: json['notes'] as String?,
      status: StatusType.fromString(json['status'] as String? ?? 'active'),
      createdBy: json['created_by'] as String?,
      updatedBy: json['updated_by'] as String?,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      syncStatus: json['sync_status'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return <String, dynamic>{
      'supplier_id': supplierId,
      'business_id': businessId,
      'supplier_code': supplierCode,
      'supplier_name': supplierName,
      'supplier_type': supplierType,
      'contact_person': contactPerson,
      'phone': phone,
      'email': email,
      'website': website,
      'address': address,
      'city': city,
      'state': state,
      'country': country,
      'postal_code': postalCode,
      'tax_number': taxNumber,
      'payment_terms': paymentTerms,
      'credit_limit': creditLimit,
      'currency': currency,
      'lead_time_days': leadTimeDays,
      'minimum_order_amount': minimumOrderAmount,
      'shipping_methods': shippingMethods != null
          ? jsonEncode(shippingMethods)
          : null,
      'quality_rating': qualityRating,
      'delivery_rating': deliveryRating,
      'price_rating': priceRating,
      'preferred_supplier': preferredSupplier,
      'contract_start_date': contractStartDate?.toIso8601String(),
      'contract_end_date': contractEndDate?.toIso8601String(),
      'notes': notes,
      'status': status.value,
      'created_by': createdBy,
      'updated_by': updatedBy,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'sync_status': syncStatus,
    };
  }

  @override
  SupplierModel copyWith({
    String? supplierId,
    String? businessId,
    String? supplierCode,
    String? supplierName,
    String? supplierType,
    String? contactPerson,
    String? phone,
    String? email,
    String? website,
    String? address,
    String? city,
    String? state,
    String? country,
    String? postalCode,
    String? taxNumber,
    String? paymentTerms,
    double? creditLimit,
    String? currency,
    int? leadTimeDays,
    double? minimumOrderAmount,
    List<String>? shippingMethods,
    double? qualityRating,
    double? deliveryRating,
    double? priceRating,
    bool? preferredSupplier,
    DateTime? contractStartDate,
    DateTime? contractEndDate,
    String? notes,
    StatusType? status,
    String? createdBy,
    String? updatedBy,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? syncStatus,
  }) {
    return SupplierModel(
      supplierId: supplierId ?? this.supplierId,
      businessId: businessId ?? this.businessId,
      supplierCode: supplierCode ?? this.supplierCode,
      supplierName: supplierName ?? this.supplierName,
      supplierType: supplierType ?? this.supplierType,
      contactPerson: contactPerson ?? this.contactPerson,
      phone: phone ?? this.phone,
      email: email ?? this.email,
      website: website ?? this.website,
      address: address ?? this.address,
      city: city ?? this.city,
      state: state ?? this.state,
      country: country ?? this.country,
      postalCode: postalCode ?? this.postalCode,
      taxNumber: taxNumber ?? this.taxNumber,
      paymentTerms: paymentTerms ?? this.paymentTerms,
      creditLimit: creditLimit ?? this.creditLimit,
      currency: currency ?? this.currency,
      leadTimeDays: leadTimeDays ?? this.leadTimeDays,
      minimumOrderAmount: minimumOrderAmount ?? this.minimumOrderAmount,
      shippingMethods: shippingMethods ?? this.shippingMethods,
      qualityRating: qualityRating ?? this.qualityRating,
      deliveryRating: deliveryRating ?? this.deliveryRating,
      priceRating: priceRating ?? this.priceRating,
      preferredSupplier: preferredSupplier ?? this.preferredSupplier,
      contractStartDate: contractStartDate ?? this.contractStartDate,
      contractEndDate: contractEndDate ?? this.contractEndDate,
      notes: notes ?? this.notes,
      status: status ?? this.status,
      createdBy: createdBy ?? this.createdBy,
      updatedBy: updatedBy ?? this.updatedBy,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      syncStatus: syncStatus ?? this.syncStatus,
    );
  }
}